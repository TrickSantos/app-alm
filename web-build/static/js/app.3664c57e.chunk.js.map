{"version":3,"sources":["src/contexts/Authentication.tsx","src/screens/Eventos/styles.ts","src/screens/Eventos/index.tsx","src/screens/Scanner/styles.ts","src/screens/Scanner/index.tsx","src/screens/CheckIn/styles.ts","src/screens/CheckIn/index.tsx","src/screens/Codigo/styles.ts","src/screens/Codigo/index.tsx","src/screens/Routes/app.routes.tsx","src/components/Input/style.ts","src/components/Input/index.tsx","src/screens/Login/styles.ts","src/screens/Login/index.tsx","src/screens/Routes/auth.routes.tsx","src/screens/Routes/index.routes.tsx","src/index.tsx","src/serviceWorkerRegistration.js","App.tsx","assets/images/logo.png"],"names":["storageToken","localStorage","getItem","storageUser","AuthenticationContext","createContext","AuthtenticationProvider","children","useState","JSON","parse","usuario","setUsuario","token","setToken","socket","io","autoConnect","auth","extraHeaders","Authorization","transportOptions","polling","useEffect","connect","on","res","message","clear","disconnect","Provider","value","signed","login","email","password","Promise","resolve","reject","emit","status","setItem","stringify","useAuth","useContext","style","StyleSheet","create","container","flex","imageBg","flexDirection","alignItems","justifyContent","title","width","padding","titleText","color","fontFamily","fontSize","main","backgroundColor","item","borderBottomColor","borderBottomWidth","marginBottom","itemText","Item","onPress","TouchableOpacity","S","Text","nome","ativo","AntDesign","name","size","FontAwesome5","Eventos","navigation","eventos","setEventos","View","LinearGradient","colors","ImageBackground","source","Logo","FlatList","data","renderItem","navigate","keyExtractor","evento","id","toString","paddingHorizontal","paddingVertical","camera","borderRadius","overflow","bottomBar","height","button","Scanner","params","route","hasPermission","setHasPermission","requestCameraPermissionsAsync","getBarCodeScannerPermissions","styles","Camera","onBarCodeScanned","console","log","popToTop","eventoId","clubeId","barCodeScannerSettings","barCodeTypes","Constants","BarCodeType","qr","shadowColor","shadowOffset","shadowOpacity","shadowRadius","elevation","card","borderBottomRightRadius","borderBottomLeftRadius","cardText","buttonContainer","nameText","margin","buttonText","CheckIn","clube","usuarioId","marginTop","textAlign","codeFiledRoot","marginLeft","marginRight","cellRoot","cellText","focusCell","Codigo","setValue","ref","useBlurOnFulfill","cellCount","useClearByFocusCell","props","getCellOnLayoutHandler","SafeAreaView","onChangeText","rootStyle","keyboardType","textContentType","renderCell","index","symbol","isFocused","onLayout","AppStack","createNativeStackNavigator","AppRoutes","Navigator","Screen","component","options","headerShown","input","paddingLeft","Input","iconPrefix","TextInput","iconSuffix","mainForm","alignSelf","Login","onLogin","secureTextEntry","Ionicons","AuthStack","AuthRoutes","initialRouteName","Routes","App","NavigationContainer","StatusBar","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","Main","useFonts","RobotoCondensed_300Light","RobotoCondensed_300Light_Italic","RobotoCondensed_400Regular","RobotoCondensed_400Regular_Italic","RobotoCondensed_700Bold","RobotoCondensed_700Bold_Italic","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceRegistration","module","exports"],"mappings":"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","file":"static/js/app.3664c57e.chunk.js","sourcesContent":["import React, {\n  createContext,\n  Dispatch,\n  ReactElement,\n  SetStateAction,\n  useContext,\n  useEffect,\n  useRef,\n  useState,\n} from \"react\";\nimport { io, Socket } from \"socket.io-client\";\nimport Constants from \"expo-constants\";\nimport { Usuario } from \"../types\";\n\ntype Props = {\n  children?: React.ReactNode;\n};\n\ninterface AuthenticatationData {\n  usuario: Usuario | null;\n  setUsuario: Dispatch<SetStateAction<Usuario | null>>;\n  login: (email: string, password: string) => Promise<void>;\n  socket: Socket;\n  signed: boolean;\n}\n\nconst TOKEN_API = \"TOKEN_API\";\nconst STORAGE_USER = \"STORAGE_USER\";\nconst storageToken = localStorage.getItem(TOKEN_API);\nconst storageUser = localStorage.getItem(STORAGE_USER);\n\nconst AuthenticationContext = createContext<AuthenticatationData>(\n  {} as AuthenticatationData\n);\n\nexport const AuthtenticationProvider: React.FC<Props> = ({ children }) => {\n  const [usuario, setUsuario] = useState<Usuario | null>(\n    storageUser ? JSON.parse(storageUser) : null\n  );\n\n  const [token, setToken] = useState(storageToken);\n  const socket = io(\n    __DEV__ ? \"ws://localhost:3333\" : \"wss://api-alm.server.sysirius.com\",\n    {\n      autoConnect: false,\n      auth: { token },\n      extraHeaders: {\n        Authorization: `Bearer ${token}`,\n      },\n      transportOptions: {\n        polling: {\n          extraHeaders: {\n            Authorization: `Bearer ${token}`,\n          },\n        },\n      },\n    }\n  );\n\n  useEffect(() => {\n    socket.connect();\n    socket.on(\"exception\", (res) => {\n      if (res.message === \"Forbidden resource\") {\n        localStorage.clear();\n        setToken(null);\n        setUsuario(null);\n      }\n    });\n\n    return () => {\n      if (socket) {\n        socket.disconnect();\n      }\n    };\n  }, [socket]);\n\n  useEffect(() => {\n    const storageUser = localStorage.getItem(STORAGE_USER);\n    const storageToken = localStorage.getItem(TOKEN_API);\n\n    if (storageToken && storageUser) {\n      socket.disconnect();\n      socket.auth = { token: storageToken };\n      socket.connect();\n    }\n  }, [socket, token]);\n\n  const login = (email: string, password: string) => {\n    return new Promise<void>((resolve, reject) => {\n      socket.emit(\n        \"login\",\n        {\n          email,\n          password,\n        },\n        (res: any) => {\n          if (res.status === \"error\") reject(res);\n\n          localStorage.setItem(STORAGE_USER, JSON.stringify(res.usuario));\n          localStorage.setItem(TOKEN_API, res.token);\n\n          setToken(res.token);\n          setUsuario(res.usuario);\n          resolve(res);\n        }\n      );\n    });\n  };\n\n  return (\n    <AuthenticationContext.Provider\n      value={{\n        signed: !!usuario,\n        usuario,\n        setUsuario,\n        login,\n        socket,\n      }}\n    >\n      {children}\n    </AuthenticationContext.Provider>\n  );\n};\n\nexport default AuthenticationContext;\n\nexport function useAuth() {\n  return useContext(AuthenticationContext);\n}\n","import { StyleSheet } from \"react-native\";\n\nconst style = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  imageBg: {\n    flex: 1,\n    flexDirection: \"column\",\n    alignItems: \"center\",\n    justifyContent: \"flex-start\",\n  },\n  title: {\n    width: \"100%\",\n    padding: 20,\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n  titleText: {\n    color: \"#FFFFFF\",\n    fontFamily: \"RobotoCondensed_400Regular\",\n    fontSize: 28,\n  },\n  main: {\n    flex: 1,\n    width: \"100%\",\n    backgroundColor: \"#EDEDED\",\n  },\n  item: {\n    width: \"100%\",\n    backgroundColor: \"#FFFFFF\",\n    flexDirection: \"row\",\n    alignItems: \"center\",\n    padding: 15,\n    borderBottomColor: \"#ABA7A7\",\n    borderBottomWidth: 1,\n    marginBottom: 2,\n  },\n  itemText: {\n    width: \"100%\",\n    fontFamily: \"RobotoCondensed_400Regular\",\n    fontSize: 28,\n    color: \"#ABA7A7\",\n  },\n});\n\nexport default style;\n","import { LinearGradient } from \"expo-linear-gradient\";\nimport React, { useEffect, useState } from \"react\";\nimport {\n  View,\n  Text,\n  ImageBackground,\n  FlatList,\n  TouchableOpacity,\n  ListRenderItem,\n} from \"react-native\";\nimport Logo from \"../../../assets/images/logo.png\";\nimport { AntDesign, FontAwesome5 } from \"@expo/vector-icons\";\nimport S from \"./styles\";\nimport { NativeStackScreenProps } from \"@react-navigation/native-stack\";\nimport { AppStackParamsList } from \"../Routes/app.routes\";\nimport { useAuth } from \"../../contexts/Authentication\";\nimport { Evento } from \"../../types\";\n\ntype Props = NativeStackScreenProps<AppStackParamsList, \"Eventos\">;\nconst Item = ({ item, onPress }: any) => {\n  return (\n    <TouchableOpacity style={S.item} onPress={onPress}>\n      <Text style={S.itemText}>{item.nome}</Text>\n      {item.ativo ? (\n        <AntDesign name=\"right\" size={24} color=\"#CCCCCC\" />\n      ) : (\n        <FontAwesome5 name=\"lock\" size={24} color=\"#CCCCCC\" />\n      )}\n    </TouchableOpacity>\n  );\n};\n\nconst Eventos = ({ navigation }: Props) => {\n  const { socket } = useAuth();\n  const [eventos, setEventos] = useState<Evento[]>([]);\n\n  const renderItem: ListRenderItem<Evento> = ({ item }) => (\n    <Item item={item} onPress={() => navigation.navigate(\"Scanner\", item)} />\n  );\n\n  useEffect(() => {\n    socket.emit(\"evento:index\", (res: Evento[]) => setEventos(res));\n    socket.on(\"evento:created\", () => {\n      socket.emit(\"evento:index\", (res: Evento[]) => setEventos(res));\n    });\n    socket.on(\"evento:destroyed\", () =>\n      socket.emit(\"evento:index\", (res: Evento[]) => setEventos(res))\n    );\n    socket.on(\"evento:updated\", () => {\n      socket.emit(\"evento:index\", (res: Evento[]) => setEventos(res));\n    });\n  }, []);\n\n  return (\n    <View style={S.container}>\n      <LinearGradient\n        style={S.container}\n        colors={[\"#f2621a\", \"#f2621b\", \"#f3621a\", \"#000000\"]}\n      >\n        <ImageBackground style={S.imageBg} source={Logo}>\n          <View style={S.title}>\n            <Text style={S.titleText}>Check-In</Text>\n          </View>\n          <View style={S.main}>\n            <FlatList\n              data={eventos}\n              renderItem={renderItem}\n              keyExtractor={(evento) => evento.id.toString()}\n            />\n          </View>\n        </ImageBackground>\n      </LinearGradient>\n    </View>\n  );\n};\n\nexport default Eventos;\n","import { StyleSheet } from \"react-native\";\n\nconst style = StyleSheet.create({\n  container: {\n    flex: 1,\n    flexDirection: \"column\",\n  },\n  main: {\n    flex: 1,\n    backgroundColor: \"#F2621A\",\n    paddingHorizontal: \"10%\",\n    paddingVertical: \"50%\",\n  },\n  camera: {\n    borderRadius: 50,\n    flex: 1,\n    overflow: \"hidden\",\n  },\n  bottomBar: {\n    width: \"100%\",\n    height: \"8%\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    backgroundColor: \"#FFFFFF\",\n  },\n  button: {\n    height: 50,\n    width: 50,\n    backgroundColor: \"#189EF1\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    borderRadius: 50,\n  },\n});\n\nexport default style;\n","import { View, Text, TouchableOpacity } from \"react-native\";\nimport React, { useEffect, useState } from \"react\";\nimport { Constants } from \"expo-barcode-scanner\";\nimport { AntDesign } from \"@expo/vector-icons\";\nimport styles from \"./styles\";\nimport {\n  BarCodeScanningResult,\n  Camera,\n  requestCameraPermissionsAsync,\n} from \"expo-camera\";\nimport { NativeStackScreenProps } from \"@react-navigation/native-stack\";\nimport { AppStackParamsList } from \"../Routes/app.routes\";\nimport { useAuth } from \"../../contexts/Authentication\";\n\ntype Props = NativeStackScreenProps<AppStackParamsList, \"Scanner\">;\n\nconst Scanner = ({ navigation, route: { params } }: Props) => {\n  const { socket } = useAuth();\n  const [hasPermission, setHasPermission] = useState<boolean | null>(null);\n\n  const onBarCodeScanned = (res: BarCodeScanningResult) => {\n    console.log(\"escaneado\");\n    console.log(res.data);\n    socket.emit(\"usuario:find\", res.data, (res: any) => {\n      if (res.status === \"error\") {\n        navigation.popToTop();\n      } else {\n        navigation.navigate(\"CheckIn\", {\n          eventoId: params.id,\n          clubeId: res.clubeId,\n          usuario: res,\n        });\n      }\n    });\n  };\n\n  const TypeCode = () =>\n    navigation.navigate(\"Codigo\", {\n      eventoId: params.id,\n    });\n\n  useEffect(() => {\n    const getBarCodeScannerPermissions = async () => {\n      const { status } = await requestCameraPermissionsAsync();\n      setHasPermission(status === \"granted\");\n    };\n\n    getBarCodeScannerPermissions();\n  }, []);\n\n  if (hasPermission === null) {\n    return <Text>Requesting for camera permission</Text>;\n  }\n  if (hasPermission === false) {\n    return <Text>No access to camera</Text>;\n  }\n\n  return (\n    <View style={styles.container}>\n      <View style={styles.main}>\n        <View style={styles.camera}>\n          <Camera\n            onBarCodeScanned={onBarCodeScanned}\n            barCodeScannerSettings={{\n              barCodeTypes: [Constants.BarCodeType.qr],\n            }}\n          />\n        </View>\n      </View>\n      <View style={styles.bottomBar}>\n        <TouchableOpacity style={styles.button} onPress={TypeCode}>\n          <AntDesign name=\"scan1\" size={24} color=\"#ffffff\" />\n        </TouchableOpacity>\n      </View>\n    </View>\n  );\n};\n\nexport default Scanner;\n","import { StyleSheet } from \"react-native\";\n\nconst style = StyleSheet.create({\n  container: {\n    flex: 1,\n    flexDirection: \"column\",\n    paddingHorizontal: \"5%\",\n    paddingVertical: \"20%\",\n    backgroundColor: \"#F2621A\",\n  },\n  main: {\n    flex: 1,\n    backgroundColor: \"#ffffff\",\n    borderRadius: 50,\n    overflow: \"hidden\",\n    alignItems: \"center\",\n    shadowColor: \"#000\",\n    shadowOffset: {\n      width: 0,\n      height: 2,\n    },\n    shadowOpacity: 0.23,\n    shadowRadius: 2.62,\n\n    elevation: 4,\n  },\n  card: {\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    height: \"60%\",\n    width: \"100%\",\n    backgroundColor: \"#0DBA3E\",\n    borderBottomRightRadius: 150,\n    borderBottomLeftRadius: 150,\n  },\n  cardText: {\n    color: \"#ffffff\",\n    fontFamily: \"RobotoCondensed_400Regular\",\n    fontSize: 36,\n  },\n  buttonContainer: {\n    width: \"100%\",\n    height: \"40%\",\n    justifyContent: \"flex-end\",\n    alignItems: \"center\",\n  },\n  nameText: {\n    margin: 5,\n  },\n  button: {\n    height: 50,\n    width: 150,\n    backgroundColor: \"#189EF1\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    borderRadius: 50,\n    marginBottom: 50,\n    shadowColor: \"#000\",\n    shadowOffset: {\n      width: 0,\n      height: 2,\n    },\n    shadowOpacity: 0.23,\n    shadowRadius: 2.62,\n\n    elevation: 4,\n  },\n  buttonText: {\n    color: \"#ffffff\",\n    fontFamily: \"RobotoCondensed_400Regular\",\n    fontSize: 16,\n  },\n});\n\nexport default style;\n","import React from \"react\";\nimport { AntDesign } from \"@expo/vector-icons\";\nimport { View, Text, TouchableOpacity } from \"react-native\";\nimport { AppStackParamsList } from \"../Routes/app.routes\";\nimport { NativeStackScreenProps } from \"@react-navigation/native-stack\";\nimport S from \"./styles\";\nimport { useAuth } from \"../../contexts/Authentication\";\n\ntype Props = NativeStackScreenProps<AppStackParamsList, \"CheckIn\">;\n\nconst CheckIn = ({\n  navigation,\n  route: {\n    params: { clubeId, eventoId, usuario },\n  },\n}: Props) => {\n  const { socket } = useAuth();\n  console.log(usuario);\n\n  const onConfirm = () => {\n    socket.emit(\n      \"presenca:create\",\n      {\n        clubeId,\n        eventoId,\n        usuarioId: usuario.id,\n      },\n      (res: any) => {\n        if (res.status === \"error\") {\n          navigation.popToTop();\n        } else {\n          navigation.popToTop();\n        }\n      }\n    );\n  };\n\n  return (\n    <View style={S.container}>\n      <View style={S.main}>\n        <View style={S.card}>\n          <AntDesign name=\"checkcircleo\" size={60} color=\"#FFFFFF\" />\n          <Text style={S.cardText}>Check-In</Text>\n          <Text style={S.cardText}>Confirmado</Text>\n        </View>\n        <View style={S.buttonContainer}>\n          <Text style={S.nameText}>{usuario.nome}</Text>\n          <Text style={S.nameText}>{usuario.clube.nome}</Text>\n          <TouchableOpacity style={S.button} onPress={onConfirm}>\n            <Text style={S.buttonText}>OK</Text>\n          </TouchableOpacity>\n        </View>\n      </View>\n    </View>\n  );\n};\n\nexport default CheckIn;\n","import { StyleSheet } from \"react-native\";\n\nexport default StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: \"#F2621A\",\n    alignItems: \"center\",\n  },\n  title: {\n    marginTop: 50,\n    textAlign: \"center\",\n    fontSize: 30,\n    color: \"#ffffff\",\n    fontFamily: \"RobotoCondensed_400Regular\",\n  },\n  codeFiledRoot: {\n    marginTop: 20,\n    width: 280,\n    marginLeft: \"auto\",\n    marginRight: \"auto\",\n  },\n  cellRoot: {\n    width: 30,\n    height: 60,\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    borderBottomColor: \"#FFFFFF\",\n    borderBottomWidth: 2,\n  },\n  cellText: {\n    color: \"#FFFFFF\",\n    fontSize: 32,\n    textAlign: \"center\",\n    fontFamily: \"RobotoCondensed_400Regular\",\n  },\n  focusCell: {\n    borderBottomColor: \"#189EF1\",\n    borderBottomWidth: 2,\n  },\n  button: {\n    height: 50,\n    width: 150,\n    backgroundColor: \"#189EF1\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    borderRadius: 50,\n    marginTop: 50,\n    shadowColor: \"#000\",\n    shadowOffset: {\n      width: 0,\n      height: 2,\n    },\n    shadowOpacity: 0.23,\n    shadowRadius: 2.62,\n\n    elevation: 4,\n  },\n  buttonText: {\n    color: \"#ffffff\",\n    fontFamily: \"RobotoCondensed_400Regular\",\n    fontSize: 16,\n  },\n});\n","import { View, Text, SafeAreaView, TouchableOpacity } from \"react-native\";\nimport React, { useState } from \"react\";\nimport {\n  CodeField,\n  Cursor,\n  useBlurOnFulfill,\n  useClearByFocusCell,\n} from \"react-native-confirmation-code-field\";\nimport { NativeStackScreenProps } from \"@react-navigation/native-stack\";\nimport styles from \"./styles\";\nimport { AppStackParamsList } from \"../Routes/app.routes\";\nimport { useAuth } from \"../../contexts/Authentication\";\n\ntype Props = NativeStackScreenProps<AppStackParamsList, \"Codigo\">;\nconst CELL_COUNT = 7;\n\nconst Codigo = ({ navigation, route: { params } }: Props) => {\n  const { socket } = useAuth();\n  const [value, setValue] = useState(\"\");\n  const ref = useBlurOnFulfill({ value, cellCount: CELL_COUNT });\n  const [props, getCellOnLayoutHandler] = useClearByFocusCell({\n    value,\n    setValue,\n  });\n\n  const onConfirm = () => {\n    socket.emit(\"usuario:find\", value, (res: any) => {\n      if (res.status === \"error\") {\n        navigation.popToTop();\n      } else {\n        navigation.navigate(\"CheckIn\", {\n          eventoId: params.eventoId,\n          clubeId: res.clubeId,\n          usuario: res,\n        });\n      }\n    });\n  };\n\n  return (\n    <SafeAreaView style={styles.container}>\n      <Text style={styles.title}>Digite o código</Text>\n      <CodeField\n        ref={ref}\n        {...props}\n        value={value}\n        onChangeText={setValue}\n        cellCount={CELL_COUNT}\n        rootStyle={styles.codeFiledRoot}\n        keyboardType=\"number-pad\"\n        textContentType=\"oneTimeCode\"\n        renderCell={({ index, symbol, isFocused }) => (\n          <View\n            onLayout={getCellOnLayoutHandler(index)}\n            key={index}\n            style={[styles.cellRoot, isFocused && styles.focusCell]}\n          >\n            <Text style={styles.cellText}>\n              {symbol || (isFocused && <Cursor />)}\n            </Text>\n          </View>\n        )}\n      />\n      <TouchableOpacity style={styles.button} onPress={onConfirm}>\n        <Text style={styles.buttonText}>OK</Text>\n      </TouchableOpacity>\n    </SafeAreaView>\n  );\n};\n\nexport default Codigo;\n","import React from \"react\";\nimport { createNativeStackNavigator } from \"@react-navigation/native-stack\";\nimport Eventos from \"../Eventos\";\nimport Scanner from \"../Scanner\";\nimport CheckIn from \"../CheckIn\";\nimport Codigo from \"../Codigo\";\nimport { Evento, Usuario } from \"../../types\";\n\nexport type AppStackParamsList = {\n  Eventos: undefined;\n  Scanner: Evento;\n  Codigo: {\n    eventoId: number;\n  };\n  CheckIn: {\n    eventoId: number;\n    clubeId: number;\n    usuario: Usuario;\n  };\n};\n\nconst AppStack = createNativeStackNavigator<AppStackParamsList>();\nconst AppRoutes = () => (\n  <AppStack.Navigator>\n    <AppStack.Screen\n      name=\"Eventos\"\n      component={Eventos}\n      options={{ headerShown: false }}\n    />\n    <AppStack.Screen\n      name=\"Scanner\"\n      component={Scanner}\n      options={{ headerShown: false }}\n    />\n    <AppStack.Screen\n      name=\"Codigo\"\n      component={Codigo}\n      options={{ headerShown: false }}\n    />\n    <AppStack.Screen\n      name=\"CheckIn\"\n      component={CheckIn}\n      options={{ headerShown: false }}\n    />\n  </AppStack.Navigator>\n);\nexport default AppRoutes;\n","import { StyleSheet } from \"react-native\";\n\nconst style = StyleSheet.create({\n  container: {\n    backgroundColor: \"#ffffff\",\n    marginTop: 5,\n    marginBottom: 5,\n    borderRadius: 10,\n    flexDirection: \"row\",\n    alignItems: \"center\",\n    paddingHorizontal: 5,\n  },\n  input: {\n    fontFamily: \"RobotoCondensed_400Regular\",\n    paddingVertical: 15,\n    paddingLeft: 5,\n    fontSize: 16,\n    width: \"100%\",\n  },\n});\n\nexport default style;\n","import React from \"react\";\nimport { TextInput, TextInputProps, View } from \"react-native\";\nimport S from \"./style\";\n\ninterface Props extends TextInputProps {\n  iconPrefix?: React.ReactNode;\n  iconSuffix?: React.ReactNode;\n}\n\nconst Input = (props: Props) => {\n  return (\n    <View style={S.container}>\n      {props.iconPrefix && props.iconPrefix}\n      <TextInput style={S.input} {...props} />\n      {props.iconSuffix && props.iconSuffix}\n    </View>\n  );\n};\n\nexport default Input;\n","import { StyleSheet } from \"react-native\";\n\nconst style = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  imageBg: {\n    flex: 1,\n    flexDirection: \"column\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n  mainForm: {\n    width: \"100%\",\n    padding: 20,\n  },\n  button: {\n    backgroundColor: \"#189EF1\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    alignSelf: \"center\",\n    width: \"50%\",\n    padding: 10,\n    borderRadius: 10,\n    marginTop: 50,\n  },\n  buttonText: {\n    color: \"#ffffff\",\n    fontFamily: \"RobotoCondensed_400Regular\",\n    fontSize: 16,\n  },\n});\n\nexport default style;\n","import React from \"react\";\nimport { ImageBackground, Text, TouchableOpacity, View } from \"react-native\";\nimport Input from \"../../components/Input\";\nimport S from \"./styles\";\nimport Logo from \"../../../assets/images/logo.png\";\nimport { FontAwesome5, Ionicons } from \"@expo/vector-icons\";\nimport { LinearGradient } from \"expo-linear-gradient\";\nimport { NativeStackScreenProps } from \"@react-navigation/native-stack\";\nimport { AuthStackParamList } from \"../Routes/auth.routes\";\nimport { useAuth } from \"../../contexts/Authentication\";\n\ntype Props = NativeStackScreenProps<AuthStackParamList, \"Login\">;\n\nconst Login = ({ navigation }: Props) => {\n  const { login } = useAuth();\n\n  const onLogin = async () => {\n    await login(\"patrick.tafa@gmail.com\", \"trick123\");\n  };\n\n  return (\n    <View style={S.container}>\n      <LinearGradient\n        style={S.container}\n        colors={[\"#f2621a\", \"#f2621b\", \"#f3621a\", \"#000000\"]}\n      >\n        <ImageBackground style={S.imageBg} source={Logo}>\n          <View style={S.mainForm}>\n            <Input\n              iconPrefix={\n                <FontAwesome5 name=\"user-alt\" size={18} color=\"#CCCCCC\" />\n              }\n              value=\"email\"\n            />\n            <Input\n              value=\"email\"\n              secureTextEntry\n              iconPrefix={\n                <FontAwesome5 name=\"lock\" size={18} color=\"#CCCCCC\" />\n              }\n              iconSuffix={\n                <Ionicons name=\"ios-eye-sharp\" size={18} color=\"#CCCCCC\" />\n              }\n            />\n            <TouchableOpacity style={S.button} onPress={onLogin}>\n              <Text style={S.buttonText}>Entrar</Text>\n            </TouchableOpacity>\n          </View>\n        </ImageBackground>\n      </LinearGradient>\n    </View>\n  );\n};\n\nexport default Login;\n","import React from \"react\";\nimport { createNativeStackNavigator } from \"@react-navigation/native-stack\";\nimport Login from \"../Login\";\nimport AppRoutes from \"./app.routes\";\n\nexport type AuthStackParamList = {\n  Login: undefined;\n  App: undefined;\n};\n\nconst AuthStack = createNativeStackNavigator<AuthStackParamList>();\n\nconst AuthRoutes = () => {\n  return (\n    <AuthStack.Navigator initialRouteName=\"Login\">\n      <AuthStack.Screen\n        name=\"Login\"\n        component={Login}\n        options={{ headerShown: false }}\n      />\n      <AuthStack.Screen\n        name=\"App\"\n        component={AppRoutes}\n        options={{ headerShown: false }}\n      />\n    </AuthStack.Navigator>\n  );\n};\n\nexport default AuthRoutes;\n","import React from \"react\";\nimport { useAuth } from \"../../contexts/Authentication\";\nimport AppRoutes from \"./app.routes\";\nimport AuthRoutes from \"./auth.routes\";\n\nconst Routes = () => {\n  const { signed } = useAuth();\n\n  return signed ? <AppRoutes /> : <AuthRoutes />;\n};\nexport default Routes;\n","import React from \"react\";\nimport { NavigationContainer } from \"@react-navigation/native\";\nimport { StatusBar } from \"expo-status-bar\";\nimport { AuthtenticationProvider } from \"./contexts/Authentication\";\nimport Routes from \"./screens/Routes/index.routes\";\n\nconst App = () => {\n  return (\n    <NavigationContainer>\n      <StatusBar backgroundColor=\"#f2621a\" />\n      <AuthtenticationProvider>\n        <Routes />\n      </AuthtenticationProvider>\n    </NavigationContainer>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  const isEnvProduction = process.env.NODE_ENV === \"production\";\n  if (isEnvProduction && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://cra.link/PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://cra.link/PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import {\n  RobotoCondensed_300Light,\n  RobotoCondensed_300Light_Italic,\n  RobotoCondensed_400Regular,\n  RobotoCondensed_400Regular_Italic,\n  RobotoCondensed_700Bold,\n  RobotoCondensed_700Bold_Italic,\n  useFonts,\n} from \"@expo-google-fonts/roboto-condensed\";\nimport AppLoading from \"expo-app-loading\";\nimport App from \"./src\";\nimport * as serviceRegistration from \"./src/serviceWorkerRegistration\";\n\nexport default function Main() {\n  const [fontsLoaded] = useFonts({\n    RobotoCondensed_300Light,\n    RobotoCondensed_300Light_Italic,\n    RobotoCondensed_400Regular,\n    RobotoCondensed_400Regular_Italic,\n    RobotoCondensed_700Bold,\n    RobotoCondensed_700Bold_Italic,\n  });\n\n  return fontsLoaded ? <App /> : <AppLoading />;\n}\n\nserviceRegistration.register();\n","module.exports = __webpack_public_path__ + \"static/media/logo.27ca7d3d.png\";"],"sourceRoot":""}